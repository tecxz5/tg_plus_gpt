import math
import telebot
import logging
import functools
from yandex_gpt import PyYandexGpt
from database_YaGPT import Tokens
from database_history import History
from database_SpeechKit import SpeechKit
from speechkit import text_to_speech, speech_to_text
from config import TOKEN, WHITELISTED_USERS

bot = telebot.TeleBot(TOKEN)
dbt = Tokens("tokens.db")
dbh = History("history.db")
dbS = SpeechKit()
gpt = PyYandexGpt()
logging.basicConfig(level=logging.DEBUG)
dbt.create_tables()
dbS.create_database()

system_prompt = "–¢—ã - —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞, –æ–±—â–∞–π—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"

def is_stt_block_limit(message, duration):
    """–ü–æ–¥—Å—á–µ—Ç –±–ª–æ–∫–æ–≤"""
    chat_id = message.from_user.id

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–∫—É–Ω–¥—ã –≤ –∞—É–¥–∏–æ–±–ª–æ–∫–∏
    audio_blocks = math.ceil(duration / 15)
    all_blocks = dbS.get_blocks_vount(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ –¥–ª–∏—Ç—Å—è –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥
    if duration >= 30:
        msg = "SpeechKit STT —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥"
        bot.send_message(chat_id, msg)
        return None

    if all_blocks == 0:
        msg = "–ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –±–ª–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ STT —Ñ—É–Ω–∫—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"
        bot.send_message(chat_id, msg)
        return None

    return audio_blocks

def is_user_whitelisted(chat_id): # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ /whitelist –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ
    return chat_id in WHITELISTED_USERS

def whitelist_check(func):
    """–ü–æ–∑–¥—Ä–∞–≤—å—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä"""
    @functools.wraps(func)
    def wrapper(message):
        chat_id = message.chat.id
        if chat_id not in WHITELISTED_USERS:
            bot.send_message(chat_id, "–£ —Ç–µ–±—è –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ/—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, —Ç–∞–∫ –∫–∞–∫ —Ç—ã –Ω–µ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ (/whitelist)")
            return
        return func(message)
    return wrapper

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    dbh.create_table(chat_id)
    dbt.create_user_profile(chat_id)
    dbS.add_user(chat_id)
    bot.send_message(chat_id,
                     text=f"""
–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏–ª–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–∞—Ç–µ–ª—è –∏—Å—Ç–æ—Ä–∏–π, –Ω–æ –Ω–µ –æ–± —ç—Ç–æ–º, —Ç—ã –º–Ω–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ, —è –Ω–∞ —Ç–µ –∏ —Ç–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å, –∫—Ä—É–∂–∫–∏ –Ω–µ –ø—Ä–æ–±—É–π, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —è —Ç–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞ –∂–¥—Éüòâ""")

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id,
                      text="""
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∞–∑–µ YaGPT(–Ø–ñ–ü–¢) –∏ SpeechKit
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –±–æ—Ç–∞ –∑–¥–µ—Å—å - https://hoprik.ru/u/11bc18 
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∑–¥–µ—Å—è: /whitelist""")

@bot.message_handler(commands=['whitelist'])
def whitelist(message):
    chat_id = message.chat.id
    if is_user_whitelisted(chat_id):
        bot.send_message(chat_id, '–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ YaGPT')
    else:
        bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ YaGPT')

@bot.message_handler(commands=['stt'])
def stt_handler(message):
    user_id = message.from_user.id
    bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª!')
    bot.register_next_step_handler(message, handle_stt)

@bot.message_handler(commands=['tts'])
@whitelist_check
def tts(message):
    chat_id = message.chat.id
    current_characters = dbS.get_token_count(chat_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    if current_characters == 0:
        bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤. –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
        return
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:")
    bot.register_next_step_handler(message, handle_tts)

@bot.message_handler(commands=['debug'])
@whitelist_check
def debug(message):
    chat_id = message.chat.id
    try:
        with open('logs.log', 'rb') as log_file:
            bot.send_document(chat_id, log_file)
        bot.send_message(chat_id, "–§–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏: {e}")

@bot.message_handler(commands=['clear'])
def clear(message):
    chat_id = message.chat.id
    dbh.clear_history(chat_id)
    bot.send_message(chat_id, "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–∏—â–µ–Ω–∞")


@bot.message_handler(commands=['profile'])
def tokens_handler(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    tokens = dbt.get_tokens(chat_id)
    symbols = dbS.get_token_count(chat_id)
    blocks = dbS.get_blocks_vount(chat_id)
    bot.send_message(chat_id, f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}

–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤: {tokens}
–ö–æ–ª-–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤: {symbols}
–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–ª–æ–∫–æ–≤: {blocks}""")

@bot.message_handler(content_types=['text'])
@whitelist_check
def handle_gpt(message):
    chat_id = message.chat.id
    current_tokens = dbt.get_tokens(chat_id)
    if current_tokens < 50:
        bot.send_message(chat_id,
                         "–í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ñ—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
    else:
        text = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_history = dbh.get_history(message.chat.id)
        history_text = "\n".join([f"{row[0]}: {row[1]} ({row[2]})" for row in user_history])
        logging.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è: {history_text}")
        final_text = f"{text}, –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: {history_text}"
        system_text = system_prompt
        prompt = [{"role": "system",
                   "text": system_text},
                  {"role": "user",
                   "text": final_text}]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ prompt
        response = gpt.create_request(chat_id, prompt)
        if response.status_code == 200:
            try:
                response_json = response.json()
                result_text = response_json['result']['alternatives'][0]['message']['text']
                logging.info(response_json)
                count = gpt.count_tokens(final_text)
                dbt.deduct_tokens(chat_id, count)
                bot.send_message(chat_id, result_text)
                dbh.save_message(chat_id, 'user', text)
                dbh.save_message(chat_id, 'assistant', result_text)
                logging.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                return
            except KeyError:
                logging.error('–û—Ç–≤–µ—Ç –æ—Ç API GPT –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∞ "result"')
                bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")
        else:
            logging.error(f'–û—à–∏–±–∫–∞ API GPT: {response.status_code}')
            bot.send_message(chat_id, f"""
        –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API GPT.
        –û—à–∏–±–∫–∞: {response.status_code}
        –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 429 - –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–æ—Å–∏—Ç –Ω–µ —Ç–∞–∫ —á–∞—Å—Ç–æ –ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã –ª–∏–±–æ –∂–µ –æ–Ω–∞ –Ω–∞–≥—Ä—É–∂–µ–Ω–∞""")
            return

@bot.message_handler(content_types=['voice'])
@whitelist_check
def voice_reply(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü–æ–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º —è –Ω–µ –º–æ–≥—Éüò•")

def handle_tts(message):
    chat_id = message.chat.id
    text = message.text
    current_characters = dbS.get_token_count(chat_id)
    if current_characters - len(text) < 0: # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–π–¥–µ—Ç –≤ –º–∏–Ω—É—Å
        bot.send_message(chat_id, "–¢—ã –ø–µ—Ä–µ—à–µ–ª –ª–∏–º–∏—Ç —Å–≤–æ–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤, —Å–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ø–æ–∫–æ—Ä–æ—á–µ")
        return
    current_characters = dbS.get_token_count(chat_id)
    success, audio_file_path = text_to_speech(text, str(chat_id))
    if success:
        dbS.update_token_count(chat_id, current_characters - len(text))
        bot.send_audio(chat_id, open(audio_file_path, 'rb'))
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏.")

def handle_stt(message):
    chat_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ
    if not message.voice:
        return

    # –°—á–∏—Ç–∞–µ–º –∞—É–¥–∏–æ–±–ª–æ–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ–±–ª–æ–∫–æ–≤
    stt_blocks = is_stt_block_limit(message, message.voice.duration)
    if not stt_blocks:
        return

    file_id = message.voice.file_id  # –ø–æ–ª—É—á–∞–µ–º id –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    file_info = bot.get_file(file_id)  # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    file = bot.download_file(file_info.file_path)  # —Å–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç SpeechKit
    status, text = speech_to_text(file)  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å True - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î, –∏–Ω–∞—á–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if status:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–ª-–≤–æ –∞—É–¥–∏–æ–±–ª–æ–∫–æ–≤ –≤ –ë–î
        bot.send_message(chat_id, text, reply_to_message_id=message.id)
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤
        dbS.update_blocks_count(chat_id,dbS.get_blocks_vount(chat_id) - stt_blocks)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–¥–∏–Ω –±–ª–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞ –∑–∞–ø—Ä–æ—Å
    else:
        bot.send_message(chat_id, text)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.polling()