import math
import telebot
import logging
import functools
from auto_token import update_config_file
from yandex_gpt import PyYandexGpt
from database_YaGPT import Tokens
from database_history import History
from config import TOKEN, WHITELISTED_USERS

bot = telebot.TeleBot(TOKEN)
dbt = Tokens("tokens.db")
dbh = History("history.db")
gpt = PyYandexGpt()
logging.basicConfig(level=logging.DEBUG)
dbt.create_tables()

system_prompt = "–¢—ã - —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞, –æ–±—â–∞–π—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"

def is_user_whitelisted(chat_id): # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ /whitelist –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ
    return chat_id in WHITELISTED_USERS

def whitelist_check(func):
    """–ü–æ–∑–¥—Ä–∞–≤—å—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä"""
    @functools.wraps(func)
    def wrapper(message):
        chat_id = message.chat.id
        if chat_id not in WHITELISTED_USERS:
            bot.send_message(chat_id, "–£ —Ç–µ–±—è –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ/—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, —Ç–∞–∫ –∫–∞–∫ —Ç—ã –Ω–µ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ (/whitelist)")
            return
        return func(message)
    return wrapper

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    dbh.create_table(chat_id)
    dbt.create_user_profile(chat_id)
    bot.send_message(chat_id,
                     text=f"""
–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏–ª–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–∞—Ç–µ–ª—è –∏—Å—Ç–æ—Ä–∏–π, –Ω–æ –Ω–µ –æ–± —ç—Ç–æ–º, —Ç—ã –º–Ω–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ, —è –Ω–∞ —Ç–µ –∏ —Ç–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å, –∫—Ä—É–∂–∫–∏ –Ω–µ –ø—Ä–æ–±—É–π, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —è —Ç–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞ –∂–¥—Éüòâ""")

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id,
                      text="""
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∞–∑–µ Gemini
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∑–¥–µ—Å—å: /whitelist""")

@bot.message_handler(commands=['whitelist'])
def whitelist(message):
    chat_id = message.chat.id
    if is_user_whitelisted(chat_id):
        bot.send_message(chat_id, '–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ YaGPT')
    else:
        bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ YaGPT')

@bot.message_handler(commands=['clear'])
def clear(message):
    chat_id = message.chat.id
    dbh.clear_history(chat_id)
    bot.send_message(chat_id, "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–∏—â–µ–Ω–∞")

@bot.message_handler(commands=['profile'])
def tokens_handler(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    tokens = dbt.get_tokens(chat_id)
    symbols = dbS.get_token_count(chat_id)
    blocks = dbS.get_blocks_vount(chat_id)
    bot.send_message(chat_id, f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}

–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤: {tokens}
""")

@bot.message_handler(content_types=['text'])
@whitelist_check
def text_reply(message):
    chat_id = message.chat.id
    current_tokens = dbt.get_tokens(chat_id)
    if current_tokens == 0:
        bot.send_message(chat_id,
                         "–í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ñ—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
    else:
        text = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_history = dbh.get_history(message.chat.id)
        history_text = "\n".join([f"{row[0]}: {row[1]} ({row[2]})" for row in user_history])
        logging.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è: {history_text}")
        final_text = f"{text}, –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: {history_text}"
        system_text = system_prompt
        prompt = [{"role": "system",
                   "text": system_text},
                  {"role": "user",
                   "text": final_text}]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ prompt
        response = gpt.create_request(chat_id, prompt)
        if response.status_code == 200:
            try:
                response_json = response.json()
                result_text = response_json['result']['alternatives'][0]['message']['text']
                logging.info(response_json)
                count = gpt.count_tokens(final_text)
                dbt.deduct_tokens(chat_id, count)
                bot.send_message(chat_id, result_text)
                dbh.save_message(chat_id, 'user', text)
                dbh.save_message(chat_id, 'assistant', result_text)
                logging.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                return
            except KeyError:
                logging.error('–û—Ç–≤–µ—Ç –æ—Ç API GPT –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∞ "result"')
                bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")
        else:
            logging.error(f'–û—à–∏–±–∫–∞ API GPT: {response.status_code}')
            bot.send_message(chat_id, f"""
        –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API GPT.
        –û—à–∏–±–∫–∞: {response.status_code}
        –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 429 - –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–æ—Å–∏—Ç –Ω–µ —Ç–∞–∫ —á–∞—Å—Ç–æ –ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã –ª–∏–±–æ –∂–µ –æ–Ω–∞ –Ω–∞–≥—Ä—É–∂–µ–Ω–∞""")
            return

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.polling()