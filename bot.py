import telebot
import logging
import functools
from telebot import types
from yandex_gpt import PyYandexGpt
from database_YaGPT import Tokens
from database_history import History
from database_SpeechKit import SpeechKit
from speechkit import text_to_speech, speech_to_text
from config import TOKEN, WHITELISTED_USERS, IAM_TOKEN, FOLDER_ID

bot = telebot.TeleBot(TOKEN)
dbt = Tokens("tokens.db")
dbh = History("history.db")
dbS = SpeechKit()
logging.basicConfig(level=logging.DEBUG)
dbt.create_tables()
dbS.create_database()

def is_user_whitelisted(chat_id): # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ /whitelist –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ
    return chat_id in WHITELISTED_USERS

def whitelist_check(func):
    @functools.wraps(func)
    def wrapper(message):
        chat_id = message.chat.id
        if chat_id not in WHITELISTED_USERS:
            bot.send_message(chat_id, "–£ —Ç–µ–±—è –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ/—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, —Ç–∞–∫ –∫–∞–∫ —Ç—ã –Ω–µ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ (/whitelist)")
            return
        return func(message)
    return wrapper

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    dbt.create_user_profile(chat_id)
    dbS.add_user(chat_id)
    bot.send_message(chat_id,
                     text=f"""
–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏–ª–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–∞—Ç–µ–ª—è –∏—Å—Ç–æ—Ä–∏–π, –Ω–æ –Ω–µ –æ–± —ç—Ç–æ–º, —Ç—ã –º–Ω–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ, —è –Ω–∞ —Ç–µ –∏ —Ç–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å, –∫—Ä—É–∂–∫–∏ –Ω–µ –ø—Ä–æ–±—É–π, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —è —Ç–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞ –∂–¥—Éüòâ""")

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id,
                      text="""
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∞–∑–µ YaGPT(–Ø–ñ–ü–¢) –∏ SpeechKit
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –±–æ—Ç–∞ –∑–¥–µ—Å—å - https://hoprik.ru/u/11bc18
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∑–¥–µ—Å—è: /whitelist""")

@bot.message_handler(commands=['whitelist'])
def whitelist(message):
    chat_id = message.chat.id
    if is_user_whitelisted(chat_id):
        bot.send_message(chat_id, '–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ YaGPT')
    else:
        bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ YaGPT')

@bot.message_handler(commands=['stt'])
def stt(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, f"–ö–æ–º–∞–Ω–¥–∞-–ø—É—Å—Ç—ã—à–∫–∞")

@bot.message_handler(commands=['tts'])
@whitelist_check
def tts(message):
    chat_id = message.chat.id
    current_characters = dbS.get_token_count(chat_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    if current_characters < 10:
        bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤. –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
        return
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:")
    bot.register_next_step_handler(message, handle_tts)

@bot.message_handler(commands=['debug'])
def debug(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, f"–ö–æ–º–∞–Ω–¥–∞-–ø—É—Å—Ç—ã—à–∫–∞")

@bot.message_handler(commands=['clear'])
def clear(message):
    chat_id = message.chat.id
    dbh.clear_history(chat_id)
    bot.send_message(chat_id, "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–∏—â–µ–Ω–∞")


@bot.message_handler(commands=['profile'])
def tokens_handler(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    tokens = dbt.get_tokens(chat_id)
    symbols = dbS.get_token_count(chat_id)
    blocks = None
    bot.send_message(chat_id, f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}

–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤: {tokens}
–ö–æ–ª-–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤: {symbols}
–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–ª–æ–∫–æ–≤: {blocks}""")

@bot.message_handler(content_types=['text'])
@whitelist_check
def text_reply(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–Ø —Ç–µ–±–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—Ä–∞–∑–æ–πüòä')


@bot.message_handler(content_types=['voice'])
@whitelist_check
def voice_reply(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü–æ–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º —è –Ω–µ –º–æ–≥—Éüò•")

def handle_tts(message):
    chat_id = message.chat.id
    text = message.text
    current_characters = dbS.get_token_count(chat_id)
    if current_characters - len(text) < 0: # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–π–¥–µ—Ç –≤ –º–∏–Ω—É—Å
        bot.send_message(chat_id, "–¢—ã –ø–µ—Ä–µ—à–µ–ª –ª–∏–º–∏—Ç —Å–≤–æ–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤, —Å–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ø–æ–∫–æ—Ä–æ—á–µ")
        return
    if len(text) >= 100: # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
        bot.send_message(chat_id, "–¢—ã –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ 100 —Å–∏–º–≤–æ–ª–æ–≤, —Å–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ø–æ–∫–æ—Ä–æ—á–µ")
        return
    current_characters = dbS.get_token_count(chat_id)
    success, audio_file_path = text_to_speech(text, str(chat_id))
    if success:
        dbS.update_token_count(chat_id, current_characters - len(text))
        bot.send_audio(chat_id, open(audio_file_path, 'rb'))
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏.")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.polling()